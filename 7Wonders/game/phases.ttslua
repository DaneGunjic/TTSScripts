PhaseHandlers = {
  ResolveCardAction = {
    next = function() print("ResolveCardAction next") end,
    PhaseAfterResolving = ""
  },
  -- Setup = {
  --   action = SetupGame,
  --   next = function() return "WonderStage" end
  -- },
  WonderStage = {
    --action = FinishWonderStage,
    next = function()
      print("WonderStage next")
      FinishWonderStage()
      if ExpansionConfig.Leaders.Base then
        PrepareLeaderStage()
        return "LeaderDrafting"
      else
        PrepareAge1Stage()
        return "Age1"
      end
    end
  },
  LeaderDrafting = {
    --action = DoLeaderStage,
    next = function()
      print("LeaderDrafting next")
      DoLeaderStage()
      -- Check if the required number of passes is reached
      if CurrentPasses == MaximumPasses then
        -- Passed 3 times, now we have to choose 1 to play
  			updatePhaseUI("Phase: Leader Selection", "Choose 1 Leader to play")
  			Wait.time(function()
  				-- After 0.1 take personal cards
  				ForceTakePersonalCards()
  				Wait.time(function()
  					-- After 0.2 seconds change the game state
  					-- This avoid buttons being created for a split second
  					-- after ForceTakePersonalCards runs
  					GameState = "LeaderSelectionStage"
  				end, 0.1)
  			end, 0.1)
      end
    end
  },
  LeaderSelectionStage = {
    next = function()
      print("LeaderSelectionStage next")
      GameState = "ResolveCardAction"
      updatePhaseUI("Phase: Card action", "Resolve your card action")
      PhaseHandlers[GameState].PhaseAfterResolving = "Age1"
      CreateReadyButtons()
      ResolvePlayerActions()
    end
  },
  Age1 = {
    --action = PrepareAge1Stage,
    next = function() end
  },
  -- Add more phases
}

function TransitionPhase()
  if NumberOfReadyPlayers == #Player.getPlayers() then
    MusicPlayer.setCurrentAudioclip({url="https://sndup.net/pckc/d", title = "All Players Ready"})
    local current = PhaseHandlers[GameState]
    if current then
      print("Everyone is ready, calling" .. GameState .. " next")
      current.next()
      --current.action()
      UnreadyAllPlayers()
    end
  end
end

function ResolvePlayerActions()
  -- Verify all players have selected actions
  for _, color in ipairs(AllSeatedPlayers) do
    if not PlayerSelectedAction[color] then
      broadcastToAll("Waiting for all players to choose actions")
      return false
    end
  end

  for _, color in ipairs(AllSeatedPlayers) do
    local action = PlayerSelectedAction[color]

    if action == "Buy" then

  	elseif action == "Sell" then
      AddCoins(color, 3, false)
  	elseif action == "BuildWonder" then

    end
  end
  PlayerSelectedAction[color] = nil
end

function ResolveBuyAction(color)
    -- Get player's selected card
    local card = PlayerSelectedCard[color]
    if not card then return end

    -- Deduct resources
    DeductResources(color, card.cost)

    -- Add to player's tableau
    AddCardToTableau(color, card)

    -- Log transaction
    LogTransaction(color, "bought", card.name)
end

function ResolveSellAction(color)
    --
end

function ResolveBuildWonderAction(color)
    --
end

function FinishWonderStage()
  -- Runs only once per game
	-- Everybody selected their wonders and is ready
	-- Deal coins
	startLuaCoroutine(Global, "DealStartingCoins")
end

function PrepareLeaderStage()
	-- Runs only once per game
	GameState = "LeaderDrafting"

	MaximumPasses = 3
	CurrentPasses = 0

	updatePhaseUI("Phase: Leader Drafting", "Select 1 leader to keep\n"..CurrentPasses.."/"..MaximumPasses)

	local tempDeck = DeckZones.Leaders.getObjects()
	tempDeck[1].deal(4)

	local newTopImage = "https://i.imgur.com/oEisU1I.jpeg"

	-- Loop through all player tiles and update the image
  for color, data in pairs(PlayerCardHolder) do
    local tile = data.Tile

    if tile and tile.getCustomObject then
      tile.setCustomObject({
				image = newTopImage,
				image_bottom = newTopImage
			})

			-- It has a new GUID
      PlayerCardHolder[color].Tile = tile.reload()

    else
      print("Tile not found or invalid for color: " .. color)
    end
  end

	-- They are now new objects, lock them again
	disableAllTiles()
end

function DoLeaderStage()
  print("DoLeaderStage function")
	-- Check how many passes we did so far
	if CurrentPasses < MaximumPasses then
		Wait.time(function()
	    for _, PlayerInstance in ipairs(Player.getPlayers()) do
				local handObjects = PlayerInstance.getHandObjects()
	      for _, Card in ipairs(handObjects) do
					RotateHands(Card, PlayerInstance.color, "Right")
	      end
	    end
		end , 0.1)

		-- Increment how many passes we did so far
		CurrentPasses = CurrentPasses + 1
		updatePhaseUI("Phase: Leader Drafting", "Select 1 leader to keep\n"..CurrentPasses.."/"..MaximumPasses)

		-- After 1 second pick up passed Leaders
		-- Passing right means we force take from left
		Wait.time(function() ForceTakeCards("Left") end, 1)
  end
end

function PrepareAge1Stage()
	-- Runs only once per game
	GameState = "Age1"
	updatePhaseUI("Age 1", "Select a card to play")

	MaximumPasses = 5
	if ExpansionConfig.Cities then
		MaximumPasses = MaximumPasses + 1
	end
	if ExpansionConfig.Armada then
		MaximumPasses = MaximumPasses + 1
	end

	local tempDeck = DeckZones.Age.Age1.getObjects()
	tempDeck[1].deal(#tempDeck[1].getObjects()/NumberOfPlayers)

  local newTopImage = "https://i.imgur.com/kkuw2Co.jpeg"

	-- Loop through all player tiles and update the image
  for color, data in pairs(PlayerCardHolder) do
    local tile = data.Tile

    if tile and tile.getCustomObject then
      tile.setCustomObject({
				image = newTopImage,
				image_bottom = newTopImage
			})

			-- It has a new GUID
      PlayerCardHolder[color].Tile = tile.reload()

    else
      print("Tile not found or invalid for color: " .. color)
    end
  end

	-- They are now new objects, lock them again
	disableAllTiles()
end

function DoAge1Stage()
	--
end
