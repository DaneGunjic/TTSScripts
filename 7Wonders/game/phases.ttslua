PhaseHandlers = {
  ResolveCardAction = {
    next = function(self)
      print(self.PhaseAfterResolving .. self.PhaseBeforeResolving)
      if self.PhaseAfterResolving == "Age1" and self.PhaseBeforeResolving == "LeaderSelectionStage" then
        print("PrepareAge1Stage now?")
        -- We resolved the leader action, we can start age 1
        for _, color in ipairs(AllSeatedPlayers) do
          local data = PlayerCardHolder[color]
          if data and data.Zone and data.Tile then
            local objects = Player[color].getHandObjects()
            local tile = data.Tile
            for _, obj in ipairs(objects) do
              obj.setRotation(tile.getRotation() + vector(0, 0, 180))
              obj.setPosition(tile.getPosition() - tile.getTransformRight() * - 3)
            end
          end
        end
        Wait.time(function()
            PrepareAge1Stage()
        end, 0.1)
      elseif self.PhaseAfterResolving == self.PhaseBeforeResolving and self.PhaseAfterResolving == "Age1" then
        print("Continue age 1 now?")
        -- Continue age 1?
      end
    end, -- End of the 'next' function
    PhaseAfterResolving  = "",
    PhaseBeforeResolving = ""
  },
  -- Setup = {
  --   action = SetupGame,
  --   next = function() return "WonderStage" end
  -- },
  WonderStage = {
    --action = FinishWonderStage,
    next = function()
      print("WonderStage next")
      FinishWonderStage()
      if ExpansionConfig.Leaders.Base then
        PrepareLeaderStage()
        return "LeaderDrafting"
      else
        PrepareAge1Stage()
        return "Age1"
      end
    end
  },
  LeaderDrafting = {
    --action = DoLeaderStage,
    next = function()
      print("LeaderDrafting next")
      DoLeaderStage()
      -- Check if the required number of passes is reached
      if CurrentPasses == MaximumPasses then
        -- Passed 3 times, now we have to choose 1 to play
  			updatePhaseUI("Phase: Leader Selection", "Choose 1 Leader to play")
        CurrentPasses = 0
        MaximumPasses = 0
  			Wait.time(function()
  				-- After 0.1 take personal cards
  				ForceTakePersonalCards()
  				Wait.time(function()
  					-- After 0.2 seconds change the game state
  					-- This avoid buttons being created for a split second
  					-- after ForceTakePersonalCards runs
  					GameState = "LeaderSelectionStage"
  				end, 0.1)
  			end, 0.1)
      end
    end
  },
  LeaderSelectionStage = {
    next = function()
      print("LeaderSelectionStage next")
      GameState = "ResolveCardAction"
      updatePhaseUI("Phase: Card action", "Resolve your card action")
      PhaseHandlers[GameState].PhaseAfterResolving = "Age1"
      PhaseHandlers[GameState].PhaseBeforeResolving = "LeaderSelectionStage"
      CreateReadyButtons()
      ResolvePlayerActions()
    end
  },
  Age1 = {
    --action = PrepareAge1Stage,
    next = function() end
  },
  -- Add more phases
}

function TransitionPhase()
  if NumberOfReadyPlayers == #Player.getPlayers() then
    MusicPlayer.setCurrentAudioclip({url="https://sndup.net/pckc/d", title = "All Players Ready"})
    local current = PhaseHandlers[GameState]
    if current then
      print("Everyone is ready, calling" .. GameState .. " next")
      current:next()
      --current.action()
      UnreadyAllPlayers()
    end
  end
end

function ResolvePlayerActions()
  -- Verify all players have selected actions
  for _, color in ipairs(AllSeatedPlayers) do
    if not PlayerSelectedAction[color] then
      broadcastToAll("Waiting for all players to choose actions")
      return false
    end
  end

  for _, color in ipairs(AllSeatedPlayers) do
    local wonder = GetPlayerCurrentWonder(color)
    if wonder then
        wonder.clearButtons()
    end

    local action = PlayerSelectedAction[color]

    if action == "Buy" then
      ResolveBuyAction(color)
  	elseif action == "Sell" then
      ResolveSellAction(color)
  	elseif action == "BuildWonder" then
      ResolveBuildWonderAction(color)
    elseif action == "ArmadaSell" then
      ResolveArmadaSellAction(color)
    end
  end
  PlayerSelectedAction[color] = nil
end

function ResolveBuyAction(color)
    local data = PlayerCardHolder[color]
    if not (data and data.Zone and data.Tile) then
        print("Error: Player zone or tile not found for color: " .. color)
        return
    end

    local objects = data.Zone.getObjects()
    if not objects or #objects == 0 then
        print("Error: No card found in player zone for color: " .. color)
        return
    end

    local tile = data.Tile
    local card_object = nil

    for _, obj in ipairs(objects) do
        if obj.type == 'Card' or obj.type == 'Deck' then
            card_object = obj
            break
        end
    end

    if card_object then
        local new_pos = tile.getPosition() + tile.getTransformForward() * -5
        card_object.setPosition(new_pos)

        local new_rot = card_object.getRotation()
        new_rot.z = 0
        card_object.setRotation(new_rot)
    else
        print("Error: No card object found for color: " .. color)
    end
end

function ResolveSellAction(color)
  local coinText = (amount == 1) and " coin" or " coins"
  broadcastToAll(Player[color].steam_name .. " gained " .. amount .. coinText .. " for selling a card", {r=0.5, g=0.5, b=0.5})
  AddCoins(color, 3, true)
  DiscardPlayerActionCard(color)
end

function ResolveBuildWonderAction(color)
    --
end

function ResolveArmadaSellAction(color)
  broadcastToAll(Player[color].steam_name .. " sold a card to advance their yellow ship ", {r=0.5, g=0.5, b=0.5})
  local ship = PlayerShips[color]["Yellow"]
  if ship then
    ship.setPosition(ship.getPosition() + ship.getTransformForward() * 1.5)
  end
end

function DiscardPlayerActionCard(color)
  local discardZone = DeckZones.Discard
  if not discardZone then
    print("Error: Discard zone not found!")
    return
  end

  local data = PlayerCardHolder[color]
  if data and data.Zone then
    local objects = data.Zone.getObjects()
    for _, obj in ipairs(objects) do
      if obj.type == 'Card' or obj.type == 'Deck' then
        obj.setPosition(discardZone.getPosition())
        obj.setRotation(discardZone.setRotation())
        break -- Only discard one card/deck
      end
    end
  end
end

function FinishWonderStage()
  -- Runs only once per game
	-- Everybody selected their wonders and is ready
	-- Deal coins
	startLuaCoroutine(Global, "DealStartingCoins")
end

function PrepareLeaderStage()
	-- Runs only once per game
	GameState = "LeaderDrafting"

	MaximumPasses = 3
	CurrentPasses = 0

	updatePhaseUI("Phase: Leader Drafting", "Select 1 leader to keep\n"..CurrentPasses.."/"..MaximumPasses)

	local tempDeck = DeckZones.Leaders.getObjects()
	tempDeck[1].deal(4)

	local newTopImage = "https://i.imgur.com/oEisU1I.jpeg"

	-- Loop through all player tiles and update the image
  for color, data in pairs(PlayerCardHolder) do
    local tile = data.Tile

    if tile and tile.getCustomObject then
      tile.setCustomObject({
				image = newTopImage,
				image_bottom = newTopImage
			})

			-- It has a new GUID
      PlayerCardHolder[color].Tile = tile.reload()

    else
      print("Tile not found or invalid for color: " .. color)
    end
  end

	-- They are now new objects, lock them again
	disableAllTiles()
end

function DoLeaderStage()
  print("DoLeaderStage function")
	-- Check how many passes we did so far
	if CurrentPasses < MaximumPasses then
		Wait.time(function()
	    for _, PlayerInstance in ipairs(Player.getPlayers()) do
				local handObjects = PlayerInstance.getHandObjects()
	      for _, Card in ipairs(handObjects) do
					RotateHands(Card, PlayerInstance.color, "Right")
	      end
	    end
		end , 0.1)

		-- Increment how many passes we did so far
		CurrentPasses = CurrentPasses + 1
		updatePhaseUI("Phase: Leader Drafting", "Select 1 leader to keep\n"..CurrentPasses.."/"..MaximumPasses)

		-- After 1 second pick up passed Leaders
		-- Passing right means we force take from left
		Wait.time(function() ForceTakeCards("Left") end, 1)
  end
end

function PrepareAge1Stage()
	-- Runs only once per game
	GameState = "Age1"
	updatePhaseUI("Age 1", "Select a card to play")

	MaximumPasses = 5
	if ExpansionConfig.Cities then
		MaximumPasses = MaximumPasses + 1
	end
	if ExpansionConfig.Armada then
		MaximumPasses = MaximumPasses + 1
	end

	local tempDeck = DeckZones.Age.Age1.getObjects()
	tempDeck[1].deal(#tempDeck[1].getObjects()/NumberOfPlayers)

  local newTopImage = "https://i.imgur.com/kkuw2Co.jpeg"

	-- Loop through all player tiles and update the image
  for color, data in pairs(PlayerCardHolder) do
    local tile = data.Tile

    if tile and tile.getCustomObject then
      tile.setCustomObject({
				image = newTopImage,
				image_bottom = newTopImage
			})

			-- It has a new GUID
      PlayerCardHolder[color].Tile = tile.reload()

    else
      print("Tile not found or invalid for color: " .. color)
    end
  end

	-- They are now new objects, lock them again
	disableAllTiles()
end

function DoAge1Stage()
	--
end
