function HandleLeadersButton() -- Button index 0
	ExpansionConfig.Leaders.Base = not ExpansionConfig.Leaders.Base
	if ExpansionConfig.Leaders.Base then
		SetupBoard.editButton({index = 0, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 0, label = "[    ]", font_color={1,1,1}})
		if ExpansionConfig.Leaders.Promo then
			HandlePromoButton()
		end
		if ExpansionConfig.Leaders.Expert then
			HandleExpertButton()
		end
	end
end

function HandlePromoButton() -- Button index 1
	ExpansionConfig.Leaders.Promo = not ExpansionConfig.Leaders.Promo
	if ExpansionConfig.Leaders.Promo then
		SetupBoard.editButton({index = 1, label = "[✓]", font_color={0,1,0}})
		if not ExpansionConfig.Leaders.Base then
			HandleLeadersButton()
		end
	else
		SetupBoard.editButton({index = 1, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleExpertButton() -- Button index 2
	ExpansionConfig.Leaders.Expert = not ExpansionConfig.Leaders.Expert
	if ExpansionConfig.Leaders.Expert then
		SetupBoard.editButton({index = 2, label = "[✓]", font_color={0,1,0}})
		if not ExpansionConfig.Leaders.Base then
			HandleLeadersButton()
		end
	else
		SetupBoard.editButton({index = 2, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleCitiesButton() -- Button index 3
	ExpansionConfig.Cities = not ExpansionConfig.Cities
	if ExpansionConfig.Cities then
		SetupBoard.editButton({index = 3, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 3, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleArmadaButton() -- Button index 4
	ExpansionConfig.Armada = not ExpansionConfig.Armada
	if ExpansionConfig.Armada then
		SetupBoard.editButton({index = 4, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 4, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleEdificeButton() -- Button index 5
	ExpansionConfig.Edifice = not ExpansionConfig.Edifice
	if ExpansionConfig.Edifice then
		SetupBoard.editButton({index = 5, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 5, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleRuinsButton() -- Button index 6
	ExpansionConfig.Ruins = not ExpansionConfig.Ruins
	if ExpansionConfig.Ruins then
		SetupBoard.editButton({index = 6, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 6, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleMythsButton() -- Button index 7
	ExpansionConfig.Myths = not ExpansionConfig.Myths
	if ExpansionConfig.Myths then
		SetupBoard.editButton({index = 7, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 7, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleFrontiersButton() -- Button index 8
	ExpansionConfig.Frontiers = not ExpansionConfig.Frontiers
	if ExpansionConfig.Frontiers then
		SetupBoard.editButton({index = 8, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 8, label = "[    ]", font_color={1,1,1}})
	end
end

function HandlePromoGuildsButton() -- Button index 9
	ExpansionConfig.PromoGuilds = not ExpansionConfig.PromoGuilds
	if ExpansionConfig.PromoGuilds then
		SetupBoard.editButton({index = 9, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 9, label = "[    ]", font_color={1,1,1}})
	end
end

function HandleCollectionButton() -- Button index 10
	WonderExpansionConfig.Collection = not WonderExpansionConfig.Collection
	if WonderExpansionConfig.Collection then
		SetupBoard.editButton({index = 10, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 10, label = "[    ]", font_color={1,1,1}})

		-- If Collection is off but Draft is on, disable Draft
		if DraftMode then
			HandleDraftButton()
		end
	end
end

function HandlePromoWondersButton() -- Button index 11
	ExpansionConfig.Promo = not ExpansionConfig.Promo
	if ExpansionConfig.Promo then
		SetupBoard.editButton({index = 11, label = "[✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 11, label = "[    ]", font_color={1,1,1}})

		-- If Collection is off but Draft is on, disable Draft
		if DraftMode then
			HandleDraftButton()
		end
	end
end

function HandleRandomButton() -- Button index 12
	RandomWonders = not RandomWonders
	-- If both are true then disable Draft
	if RandomWonders then
		SetupBoard.editButton({index = 12, label = "[✓]", font_color={0,1,0}})
		if DraftMode then
			HandleDraftButton()
		end
	else
		SetupBoard.editButton({index = 12, label = "[    ]", font_color={1,1,1}})
		if not DraftMode then
			HandleDraftButton()
		end
	end
end

function HandleDraftButton() -- Button index 13
	DraftMode = not DraftMode

	if DraftMode and not WonderExpansionConfig.Collection then
		broadcastToAll("Using Draft Mode without Collection Wonders is not possible. Toggling Collection.")
		HandleCollectionButton()
	end

	if DraftMode then
		SetupBoard.editButton({index = 13, label = "[✓]", font_color={0,1,0}})
		if RandomWonders then
			HandleRandomButton()
		end
	else
		SetupBoard.editButton({index = 13, label = "[    ]", font_color={1,1,1}})
		if not RandomWonders then
			HandleRandomButton()
		end
	end
end

function AdjustDraftNumber(obj, color, alt) -- Button index 14
	if alt then
		DraftModeNumber = DraftModeNumber - 1
		if DraftModeNumber == 2 then
			DraftModeNumber = 9
		end
	else
		DraftModeNumber = DraftModeNumber + 1
		if DraftModeNumber == 10 then
			DraftModeNumber = 3
		end
	end

	SetupBoard.editButton({
            index = 14,
            label = "[" .. DraftModeNumber .. "]"
					})
end

-- [[CALL WHEN 'START GAME' BUTTON IS PRESSED]]
function HandleStartGameButton()

	for _, textObject in ipairs(TextOnSetupBoard) do
	  if textObject and textObject.destroy then  -- Check if object exists and has destroy()
	      textObject.destroy()  -- Remove the text object
	  end
	end
	TextOnSetupBoard = {}  -- Clear the table afterward

	startLuaCoroutine(Global, "HandleStartGameButtonCo")
end

function HandleFlipButton(obj, color, alt)
	if not IsObjectInPlayerWonderZone(obj, color) then
    broadcastToColor("This isn't your wonder!", color, {1, 0, 0})
    return
	end

	-- Random Mode
	if not DraftMode then
		local tempDefaultRot = {table.unpack(PlayerInfo[color].ComponentRotation)}
		local tempCurrentRot = RandomWonderObj[color].getRotation()

		-- Flipped object have the same height in-game, but actually offset according to their pivot point, so we add 0.2 so the Wonder keeps its position-
		local tempFlippedPos = {
			RandomWonderObj[color].getPosition().x,
			RandomWonderObj[color].getPosition().y + 0.2,
			RandomWonderObj[color].getPosition().z
		}

		if rotationEquals(tempDefaultRot, tempCurrentRot) then
			-- Flip to Night Side (B)
			RandomWonderObj[color].setRotation({
			  x = tempCurrentRot[1],
			  y = tempCurrentRot[2],
			  z = tempCurrentRot[3] + 180
			})

			RandomWonderObj[color].setPosition(tempFlippedPos)
			RandomWonderObj[color].editButton({
				index          = 0,
				position       = {0, 0, -0.5},
				rotation       = {0, 0, 180}
			})
			RandomWonderObj[color].editButton({
				index          = 1,
				position       = {0, 0, 0},
				rotation       = {0, 0, 180}
			})
		else
			-- Flip to Day Side (A)
			-- Offsets the height to match the default one
			tempFlippedPos[2] = tempFlippedPos[2] - 0.4

			RandomWonderObj[color].setRotation(tempDefaultRot)
			RandomWonderObj[color].setPosition(tempFlippedPos)
			RandomWonderObj[color].editButton({
				index          = 0,
				position       = {0, 0.2, -0.5},
				rotation       = {0, 0, 0}
			})
			RandomWonderObj[color].editButton({
				index          = 1,
				position       = {0, 0.2, 0},
				rotation       = {0, 0, 0}
			})
		end
	-- Draft Mode
	else
		local CurrentWonderObj = DraftWonders[color][PlayerCurrentlyChosenWonder[color]]
		local tempDefaultRot = PlayerInfo[color].ComponentRotation
		local tempCurrentRot = 	CurrentWonderObj.getRotation()

		-- Flipped object have the same height in-game, but actually offset according to their pivot point, so we add 0.2 so the Wonder keeps its position
		local tempFlippedPos = {
			CurrentWonderObj.getPosition().x,
			CurrentWonderObj.getPosition().y + 0.2,
			CurrentWonderObj.getPosition().z}

		local tempNum = PlayerCurrentlyChosenWonder[color]

		if rotationEquals(tempDefaultRot, tempCurrentRot) then
			local playerWonderTable = PlayerInfo[color]
			local componentRot = playerWonderTable.ComponentRotation

			-- Add 180 to Z-axis only
			CurrentWonderObj.setRotation({
			  x = tempCurrentRot[1],
			  y = tempCurrentRot[2],
			  z = tempCurrentRot[3] + 180
			})

			CurrentWonderObj.setPosition(tempFlippedPos)

			for i, wonder in ipairs(DraftWonders[color]) do
				wonder.editButton({
					index          = 0,
					position       = {0, 0, -0.5},
					rotation       = {0, 0, 180}
				})
				wonder.editButton({
					index          = 1,
					position       = {0, 0, 0},
					rotation       = {0, 0, 180}
				})
				wonder.editButton({
					index          = 2,
					position       = {1, 0, 0},
					rotation       = {0, 0, 180}
				})
				wonder.editButton({
					index          = 3,
					position       = {-1, 0, 0},
					rotation       = {0, 0, 180}
				})
			end
		else
			tempFlippedPos[2] = tempFlippedPos[2] - 0.4
			CurrentWonderObj.setRotation(tempDefaultRot)
			CurrentWonderObj.setPosition(tempFlippedPos)

			for i, wonder in ipairs(DraftWonders[color]) do
				wonder.editButton({
					index          = 0,
					position       = {0, 0.2, -0.5},
					rotation       = {0, 0, 0}
				})
				wonder.editButton({
					index          = 1,
					position       = {0, 0.2, 0},
					rotation       = {0, 0, 0}
				})
				wonder.editButton({
					index          = 2,
					position       = {-1, 0.2, 0},
					rotation       = {0, 0, 0}
				})
				wonder.editButton({
					index          = 3,
					position       = {1, 0.2, 0},
					rotation       = {0, 0, 0}
				})
			end
		end
	end
end

function HandleKeepButton(obj, color, alt)
	if not IsObjectInPlayerWonderZone(obj, color) then
    broadcastToColor("This isn't your wonder!", color, {1, 0, 0})
    return
	end

	-- Based on rotation we know if it's Day or Night
	local Side = "Day / A"
	if IsPlayerWonderFlipped(color) then
		Side = "Night / B"
	end

	broadcastToAll(Player[color].steam_name .. " chose " .. GetPlayerCurrentWonder(color).getName() .. " (" .. Side .. ")")

	obj.clearButtons()

	ReadyUp(Player[color])
end

function HandleCycleLeftButton(obj, color, alt)
	if not IsObjectInPlayerWonderZone(obj, color) then
    broadcastToColor("This isn't your wonder!", color, {1, 0, 0})
    return
	end

	local tempNum = PlayerCurrentlyChosenWonder[color]
	-- We might be on Night / B side, so save the location and rotation
	local CurrentWonderRot = DraftWonders[color][tempNum].getRotation()
	local CurrentWonderPos = DraftWonders[color][tempNum].getPosition()

	-- Move the current Wonder below the table
	DraftWonders[color][tempNum].setPosition(PlayerInfo[color].DraftModePos)

	-- Find the previous (left) index
	PlayerCurrentlyChosenWonder[color] = PlayerCurrentlyChosenWonder[color] - 1
	if PlayerCurrentlyChosenWonder[color] == 0 then
		PlayerCurrentlyChosenWonder[color] = DraftModeNumber
	end

	DraftWonders[color][PlayerCurrentlyChosenWonder[color]].setPosition(CurrentWonderPos)
	DraftWonders[color][PlayerCurrentlyChosenWonder[color]].setRotation(CurrentWonderRot)
end

function HandleCycleRightButton(obj, color, alt)
	if not IsObjectInPlayerWonderZone(obj, color) then
    broadcastToColor("This isn't your wonder!", color, {1, 0, 0})
    return
	end

	local tempNum = PlayerCurrentlyChosenWonder[color]
	-- We might be on Night / B side, so save the location and rotation
	local CurrentWonderRot = DraftWonders[color][tempNum].getRotation()
	local CurrentWonderPos = DraftWonders[color][tempNum].getPosition()

	-- Move the current Wonder below the table
	DraftWonders[color][tempNum].setPosition(PlayerInfo[color].DraftModePos)

	-- Find the next (right) index
	PlayerCurrentlyChosenWonder[color] = PlayerCurrentlyChosenWonder[color] + 1
	if PlayerCurrentlyChosenWonder[color] > DraftModeNumber then
		PlayerCurrentlyChosenWonder[color] = 1
	end

	DraftWonders[color][PlayerCurrentlyChosenWonder[color]].setPosition(CurrentWonderPos)
	DraftWonders[color][PlayerCurrentlyChosenWonder[color]].setRotation(CurrentWonderRot)
end

function HandleBuyCard(obj, color, alt)
	-- Get the color of the tile's owner (from your PlayerCardHolder table)
  local tileColor
  for color, data in pairs(PlayerCardHolder) do
    if data.Tile and data.Tile.guid == obj.guid then
      tileColor = color
      break
    end
  end

  -- Verify permission
  if color:lower() ~= tileColor:lower() then
    broadcastToColor("This isn't your button!", color, {1,0,0})
    return
  end

	PlayerSelectedAction[tileColor] = "Buy"
	ReadyUp(Player[tileColor])
end

function HandleSellCard(obj, color, alt)
	-- Get the color of the tile's owner (from your PlayerCardHolder table)
	local tileColor
	for color, data in pairs(PlayerCardHolder) do
		if data.Tile and data.Tile.guid == obj.guid then
			tileColor = color
			break
		end
	end

	-- Verify permission
	if color:lower() ~= tileColor:lower() then
		broadcastToColor("This isn't your button!", color, {1,0,0})
		return  -- Exit function if wrong player
	end

	PlayerSelectedAction[tileColor] = "Sell"
	ReadyUp(Player[tileColor])
end

function HandleBuildWonder(obj, color, alt)
	-- Get the color of the tile's owner (from your PlayerCardHolder table)
	local tileColor
	for color, data in pairs(PlayerCardHolder) do
		if data.Tile and data.Tile.guid == obj.guid then
			tileColor = color
			break
		end
	end

	-- Verify permission
	if color:lower() ~= tileColor:lower() then
		broadcastToColor("This isn't your button!", player_clicker_color, {1,0,0})
		return  -- Exit function if wrong player
	end

	PlayerSelectedAction[tileColor] = "BuildWonder"
	ReadyUp(Player[tileColor])
end

function HandleArmadaSellCard(obj, color, alt)
	-- Get the color of the tile's owner (from your PlayerCardHolder table)
	local tileColor
	for color, data in pairs(PlayerCardHolder) do
		if data.Tile and data.Tile.guid == obj.guid then
			tileColor = color
			break
		end
	end

	-- Verify permission
	if color:lower() ~= tileColor:lower() then
		broadcastToColor("This isn't your button!", player_clicker_color, {1,0,0})
		return  -- Exit function if wrong player
	end

	PlayerSelectedAction[tileColor] = "ArmadaSell"
	ReadyUp(Player[tileColor])
end
