function HandleLeadersButton() -- Button index 0
	ExpansionsUsed.Leaders.Base = not ExpansionsUsed.Leaders.Base
	if ExpansionsUsed.Leaders.Base then
		SetupBoard.editButton({index = 0, label = "Leaders [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 0, label = "Leaders [    ]", font_color={1,1,1}})
	end
end

function HandleCitiesButton() -- Button index 1
	ExpansionsUsed.Cities = not ExpansionsUsed.Cities
	if ExpansionsUsed.Cities then
		SetupBoard.editButton({index = 1, label = "Cities [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 1, label = "Cities [    ]", font_color={1,1,1}})
	end
end

function HandleArmadaButton() -- Button index 2
	ExpansionsUsed.Armada = not ExpansionsUsed.Armada
	if ExpansionsUsed.Armada then
		SetupBoard.editButton({index = 2, label = "Armada [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 2, label = "Armada [    ]", font_color={1,1,1}})
	end
end

function HandleRuinsButton() -- Button index 3
	ExpansionsUsed.Ruins = not ExpansionsUsed.Ruins
	if ExpansionsUsed.Ruins then
		SetupBoard.editButton({index = 3, label = "Ruins [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 3, label = "Ruins [    ]", font_color={1,1,1}})
	end
end

function HandleMythsButton() -- Button index 4
	ExpansionsUsed.Myths = not ExpansionsUsed.Myths
	if ExpansionsUsed.Myths then
		SetupBoard.editButton({index = 4, label = "Myths [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 4, label = "Myths [    ]", font_color={1,1,1}})
	end
end

function HandleFrontiersButton() -- Button index 5
	ExpansionsUsed.Frontiers = not ExpansionsUsed.Frontiers
	if ExpansionsUsed.Frontiers then
		SetupBoard.editButton({index = 5, label = "Frontiers [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 5, label = "Frontiers [    ]", font_color={1,1,1}})
	end
end

function HandleCollectionButton() -- Button index 6
	WonderExpansionsUsed.Collection = not WonderExpansionsUsed.Collection
	if WonderExpansionsUsed.Collection then
		SetupBoard.editButton({index = 6, label = "Collection [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 6, label = "Collection [    ]", font_color={1,1,1}})

		-- If Collection is off but Draft is on, disable Draft
		if DraftMode then
			HandleDraftButton()
		end
	end
end

function HandlePromoButton() -- Button index 7
	WonderExpansionsUsed[2] = not WonderExpansionsUsed[2]
	if WonderExpansionsUsed[2] then
		SetupBoard.editButton({index = 7, label = "Promo       [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 7, label = "Promo       [    ]", font_color={1,1,1}})
	end
end

function HandleRandomButton() -- Button index 8
	RandomWonders = not RandomWonders
	-- If both are true then disable Draft
	if RandomWonders and DraftMode then
		DraftMode = not DraftMode
		SetupBoard.editButton({index = 8, label = "Random [✓]", font_color={0,1,0}})
		SetupBoard.editButton({index = 9, label = "Draft [    ]", font_color={1,1,1}})
	elseif RandomWonders and not DraftMode  then
		SetupBoard.editButton({index = 8, label = "Random [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 8, label = "Random [    ]", font_color={1,1,1}})
		DraftMode = not DraftMode
		SetupBoard.editButton({index = 9, label = "Draft [✓]", font_color={0,1,0}})
	end
end

function HandleDraftButton() -- Button index 9
	DraftMode = not DraftMode

	if DraftMode and not WonderExpansionsUsed[1] then
		broadcastToAll("Using Draft Mode without Collection Wonders is not possible. Toggling Collection.")
		HandleCollectionButton()
	end

	if DraftMode and not RandomWonders then
		SetupBoard.editButton({index = 9, label = "Draft [✓]", font_color={0,1,0}})
	elseif DraftMode and RandomWonders then
		RandomWonders = not RandomWonders
		SetupBoard.editButton({index = 8, label = "Random [    ]", font_color={1,1,1}})
		SetupBoard.editButton({index = 9, label = "Draft [✓]", font_color={0,1,0}})
	else
		SetupBoard.editButton({index = 9, label = "Draft [    ]", font_color={1,1,1}})
		RandomWonders = not RandomWonders
		SetupBoard.editButton({index = 8, label = "Random [✓]", font_color={0,1,0}})
	end
end

-- [[CALL WHEN 'START GAME' BUTTON IS PRESSED]]
function HandleStartGameButton()
	startLuaCoroutine(Global, "HandleStartGameButtonCo")
end

function HandleFlipButton(obj, color, alt)
	-- Random Mode
	if not DraftMode then
		local tempDefaultRot = _G["_"..color.."PlayerWonder"].WonderRot
		local tempCurrentRot = {RandomWonderObj[color].getRotation().x, RandomWonderObj[color].getRotation().y, RandomWonderObj[color].getRotation().z}
		-- Flipped object have the same height in-game, but actually offset according to their pivot point, so we add 0.2 so the Wonder keeps its position-
		local tempFlippedPos = {RandomWonderObj[color].getPosition().x, RandomWonderObj[color].getPosition().y + 0.2, RandomWonderObj[color].getPosition().z}

		if equals(tempDefaultRot, tempCurrentRot, true) then
			-- Flip to Night Side (B)
			RandomWonderObj[color].setRotation(_G["_"..color.."PlayerWonder"].WonderFlipRot)
			RandomWonderObj[color].setPosition(tempFlippedPos)
			RandomWonderObj[color].editButton({
				index          = 0,
				position       = {0, -0.8, -0.5},
				rotation       = {0, 0, 180}
			})
			RandomWonderObj[color].editButton({
				index          = 1,
				position       = {0, -0.8, 0},
				rotation       = {0, 0, 180}
			})
		else
			-- Flip to Day Side (A)
			-- Offsets the height to match the default one
			tempFlippedPos[2] = tempFlippedPos[2] - 0.4

			RandomWonderObj[color].setRotation(tempDefaultRot)
			RandomWonderObj[color].setPosition(tempFlippedPos)
			RandomWonderObj[color].editButton({
				index          = 0,
				position       = {0, 1, -0.5},
				rotation       = {0, 0, 0}
			})
			RandomWonderObj[color].editButton({
				index          = 1,
				position       = {0, 1, 0},
				rotation       = {0, 0, 0}
			})
		end
	-- Draft Mode
	else
		local CurrentWonderObj = _G["_"..color.."DraftWonderObj"][PlayerCurrentlyChosenWonder[color]]
		local tempDefaultRot = _G["_"..color.."PlayerWonder"].WonderRot
		local tempCurrentRot = {
			CurrentWonderObj.getRotation().x,
			CurrentWonderObj.getRotation().y,
			CurrentWonderObj.getRotation().z}
		-- Flipped object have the same height in-game, but actually offset according to their pivot point, so we add 0.2 so the Wonder keeps its position
		local tempFlippedPos = {
			CurrentWonderObj.getPosition().x,
			CurrentWonderObj.getPosition().y + 0.2,
			CurrentWonderObj.getPosition().z}

		local tempNum = PlayerCurrentlyChosenWonder[color]

		if equals(tempDefaultRot, tempCurrentRot, true) then
			local playerWonderTable = _G["_"..color.."PlayerWonder"]

		  CurrentWonderObj.setRotation(playerWonderTable.WonderFlipRot)
			CurrentWonderObj.setPosition(tempFlippedPos)

			for i, wonder in ipairs(_G["_"..color.."DraftWonderObj"]) do
				wonder.editButton({
					index          = 0,
					position       = {0, -0.8, -0.5},
					rotation       = {0, 0, 180}
				})
				wonder.editButton({
					index          = 1,
					position       = {0, -0.8, 0},
					rotation       = {0, 0, 180}
				})
				wonder.editButton({
					index          = 2,
					position       = {1, -0.8, 0},
					rotation       = {0, 0, 180}
				})
				wonder.editButton({
					index          = 3,
					position       = {-1, -0.8, 0},
					rotation       = {0, 0, 180}
				})
			end
		else
			tempFlippedPos[2] = tempFlippedPos[2] - 0.4
			CurrentWonderObj.setRotation(tempDefaultRot)
			CurrentWonderObj.setPosition(tempFlippedPos)

			for i, wonder in ipairs(_G["_"..color.."DraftWonderObj"]) do
				wonder.editButton({
					index          = 0,
					position       = {0, 1, -0.5},
					rotation       = {0, 0, 0}
				})
				wonder.editButton({
					index          = 1,
					position       = {0, 1, 0},
					rotation       = {0, 0, 0}
				})
				wonder.editButton({
					index          = 2,
					position       = {-1, 1, 0},
					rotation       = {0, 0, 0}
				})
				wonder.editButton({
					index          = 3,
					position       = {1, 1, 0},
					rotation       = {0, 0, 0}
				})
			end
		end
	end
end

function HandleKeepButton(obj, color, alt)
	-- Based on rotation we know if it's Day or Night
	local tempDefaultRot = _G["_"..color.."PlayerWonder"].WonderRot
	local CurrentWonderObj = nil

	if DraftMode then
		CurrentWonderObj = _G["_"..color.."DraftWonderObj"][PlayerCurrentlyChosenWonder[color]]
	else
		CurrentWonderObj = RandomWonderObj[color]
	end

	local tempCurrentRot = {
		CurrentWonderObj.getRotation().x,
		CurrentWonderObj.getRotation().y,
		CurrentWonderObj.getRotation().z

	}
	local Side = "Day / A"

	if not equals(tempDefaultRot, tempCurrentRot, true) then
		Side = "Night / B"
	end

	broadcastToAll(Player[color].steam_name .. " chose " .. CurrentWonderObj.getName() .. " (" .. Side .. ")")

	obj.clearButtons()

	ReadyUp(Player[color], _, _)
end

function HandleCycleLeftButton(obj, color, alt)
	local tempNum = PlayerCurrentlyChosenWonder[color]
	-- We might be on Night / B side, so save the location and rotation
	local CurrentWonderRot = _G["_"..color.."DraftWonderObj"][tempNum].getRotation()
	local CurrentWonderPos = _G["_"..color.."DraftWonderObj"][tempNum].getPosition()

	-- Move the current Wonder below the table
	_G["_"..color.."DraftWonderObj"][tempNum].setPosition(_G["_"..color.."PlayerWonder"]["DraftMode"..tempNum.."Pos"])

	-- Find the previous (left) index
	PlayerCurrentlyChosenWonder[color] = PlayerCurrentlyChosenWonder[color] - 1
	if PlayerCurrentlyChosenWonder[color] == 0 then
		PlayerCurrentlyChosenWonder[color] = DraftModeNumber
	end

	_G["_"..color.."DraftWonderObj"][PlayerCurrentlyChosenWonder[color]].setPosition(CurrentWonderPos)
	_G["_"..color.."DraftWonderObj"][PlayerCurrentlyChosenWonder[color]].setRotation(CurrentWonderRot)
end

function HandleCycleRightButton(obj, color, alt)
	local tempNum = PlayerCurrentlyChosenWonder[color]
	-- We might be on Night / B side, so save the location and rotation
	local CurrentWonderRot = _G["_"..color.."DraftWonderObj"][tempNum].getRotation()
	local CurrentWonderPos = _G["_"..color.."DraftWonderObj"][tempNum].getPosition()

	-- Move the current Wonder below the table
	_G["_"..color.."DraftWonderObj"][tempNum].setPosition(_G["_"..color.."PlayerWonder"]["DraftMode"..tempNum.."Pos"])

	-- Find the next (right) index
	PlayerCurrentlyChosenWonder[color] = PlayerCurrentlyChosenWonder[color] + 1
	if PlayerCurrentlyChosenWonder[color] > DraftModeNumber then
		PlayerCurrentlyChosenWonder[color] = 1
	end

	_G["_"..color.."DraftWonderObj"][PlayerCurrentlyChosenWonder[color]].setPosition(CurrentWonderPos)
	_G["_"..color.."DraftWonderObj"][PlayerCurrentlyChosenWonder[color]].setRotation(CurrentWonderRot)
end
