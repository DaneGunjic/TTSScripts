function InitializeReadyStatusCircles()
	-- Initialize ready status circles based on seated players
	local allPlayerColors = {"White", "Red", "Yellow", "Green", "Blue", "Purple", "Pink"}
	local seatedPlayers = getSeatedPlayers()

	-- Hide all circles first
	for _, color in ipairs(allPlayerColors) do
		UI.setAttribute("Ready" .. color, "active", "false")
	end

	-- Show circles only for seated players
	for _, color in ipairs(seatedPlayers) do
		UI.setAttribute("Ready" .. color, "active", "true")
	end
end

function UnreadyAllPlayers()
	local seatedPlayers = getSeatedPlayers()

	for _, color in ipairs(seatedPlayers) do
		--print("Setting player " .. color .. " to not ready")
		ReadyList[color] = false
		NumberOfReadyPlayers = NumberOfReadyPlayers - 1
		-- Show all circles when players are unreadied
		UI.setAttribute("Ready" .. color, "active", "true")
		-- Start timer when player becomes unready
		StartPlayerTimer(color)
	end
end

-- Called when a player pressed the "Ready" button
function ReadyUp(player)
	ReadyList[player.color] = not ReadyList[player.color]

	broadcastToAll(player.steam_name .. " is " .. (ReadyList[player.color] and "ready" or "not ready"))

	if ReadyList[player.color] then
		NumberOfReadyPlayers = NumberOfReadyPlayers + 1
		-- Hide the circle when player is ready
		UI.setAttribute("Ready" .. player.color, "active", "false")
		-- Stop timer when player becomes ready
		StopPlayerTimer(player.color)
	else
		NumberOfReadyPlayers = NumberOfReadyPlayers - 1
		-- Show the circle when player is not ready
		UI.setAttribute("Ready" .. player.color, "active", "true")
		-- Start timer when player becomes unready
		StartPlayerTimer(player.color)
	end

	TransitionPhase()
end

function CreateActionButtons(tile)
	if ExpansionConfig.Armada then
		tile.createButton({
			click_function = "HandleArmadaSellCard",
			label = "Armada\nSell",
			tooltip = "Moves your yellow ship for free.\nAutomatically grants coins from Armada.",
			position = {-1.5, 0.1, 0},
			rotation = {0, 0 ,0},
			width = 1250,
			height = 1000,
			scale = {x=0.2,y=0.2,z=0.2},
			font_size = 350,
		})
	end

	tile.createButton({
		click_function = "HandleBuyCard",
		label = "Buy",
		tooltip = "Adds the card to your tableau.\nPay manually.",
		position = {-0.95, 0.1, -0.5},
		rotation = {0, 0 ,0},
		width = 1000,
		height = 1000,
		scale = {x=0.2,y=0.2,z=0.2},
		font_size = 500,
	})

	tile.createButton({
		click_function = "HandleSellCard",
		label = "Sell",
		tooltip = "Gain 3 coins.",
		position = {-0.95, 0.1, 0},
		rotation = {0, 0 ,0},
		width = 1000,
		height = 1000,
		scale = {x=0.2,y=0.2,z=0.2},
		font_size = 500,
	})

	tile.createButton({
		click_function = "HandleBuildWonder",
		label = "Wonder",
		tooltip = "Won't move the card. Place it below your wonder stage manually.",
		position = {-0.95, 0.1, 0.5},
		rotation = {0, 0 ,0},
		width = 1350,
		height = 1000,
		scale = {x=0.2,y=0.2,z=0.2},
		font_size = 350,
	})
end

function ForceTakePersonalCards()
	--print("ForceTakePersonalCards")
	-- Makes all players draw all cards on their tile
	for color, data in pairs(PlayerCardHolder) do
		local zone = data.Zone
		if zone ~= nil then
			local objectsInZone = zone.getObjects()
			for _, obj in ipairs(objectsInZone) do
				if obj.type == 'Deck' then
					obj.deal(#obj.getObjects(), color)
				elseif obj.type == 'Card' then
					obj.deal(1, color)
				end
			end
		else
			print("Zone not found for player color: " .. color)
		end
	end
end

function UnreadyPlayerIfNeeded(color, zone)
	local cardCount = CountCardsInZone(zone)
	--print("UnreadyPlayerIfNeeded " .. cardCount)
	if cardCount <= CurrentPasses and GameState == "LeaderDrafting" then
		if ReadyList[color] then
			--print("settings ready to false, first if")
			ReadyList[color] = false
			NumberOfReadyPlayers = NumberOfReadyPlayers - 1
			broadcastToAll(Player[color].steam_name .. " is not ready")
			-- Show the circle when player becomes unready
			UI.setAttribute("Ready" .. color, "active", "true")
			-- Start timer when player becomes unready
			StartPlayerTimer(color)
			-- Restart blinking when player becomes unready
			if PlayerCardHolder[color] and PlayerCardHolder[color].Tile then
				BlinkPlayerCardHolders()
			end
		end
	elseif GameState == "LeaderSelectionStage" and ReadyList[color] then
		--print("settings ready to false, second if")
		ReadyList[color] = false
		NumberOfReadyPlayers = NumberOfReadyPlayers - 1
		broadcastToAll(Player[color].steam_name .. " is not ready")
		-- Show the circle when player becomes unready
		UI.setAttribute("Ready" .. color, "active", "true")
		-- Start timer when player becomes unready
		StartPlayerTimer(color)
		-- Restart blinking when player becomes unready
		if PlayerCardHolder[color] and PlayerCardHolder[color].Tile then
			BlinkPlayerCardHolders()
		end
	end
end

function CreateReadyButtons()
	for _, color in ipairs(getSeatedPlayers()) do
		-- Show the UI ready button for this player instead of creating physical button
		UI.setAttribute("ReadyButton" .. color, "active", "true")
		-- Reset button to initial state (Not Ready, red color)
		UI.setAttribute("ReadyButton" .. color, "text", "Not Ready")
		UI.setAttribute("ReadyButton" .. color, "color", "#FF0000")
		--print("SHOWED UI READY BUTTON FOR " .. color)
	end
end

-- UI Ready Button Click Handler
function ToggleReady(player, value, id)
	TogglePlayerReady(player.color)
end

-- Helper function to toggle ready state and update UI
function TogglePlayerReady(color)
	-- Only allow players to toggle their own ready state
	if Player[color].seated then
		-- Toggle the ready state
		ReadyUp(Player[color])
		
		-- Update UI button appearance based on new state
		if ReadyList[color] then
			-- Player is now ready - green button
			UI.setAttribute("ReadyButton" .. color, "text", "Ready")
			UI.setAttribute("ReadyButton" .. color, "color", "#00AA00")
		else
			-- Player is now not ready - red button
			UI.setAttribute("ReadyButton" .. color, "text", "Not Ready")
			UI.setAttribute("ReadyButton" .. color, "color", "#FF0000")
		end
	end
end
