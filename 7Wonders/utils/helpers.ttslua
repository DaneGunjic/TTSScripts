function AddCoins(color, amount, isRecursiveCall)
	if amount <= 0 then return end

	local amountToGive = amount

	if not isRecursiveCall then
		local coinText = (amount == 1) and "coin" or "coins"
		broadcastToAll(player.steam_name .. " gained " .. amount .. coinText, {r=0.5, g=0.5, b=0.5})
	end

	local coinSpawnPosition = Vector(PlayerInfo[color].WonderPos)
	coinSpawnPosition.y = 2
	coinSpawnPosition.x = coinSpawnPosition.x + math.random(-150, 150) / 100
	coinSpawnPosition.z = coinSpawnPosition.z + math.random(-100, 100) / 100

	if amount > 15 then
		CoinBags.Coin6.takeObject({
			position = coinSpawnPosition,
			rotation = PlayerInfo[color].ComponentRotation,
			smooth = false
		})

		amountToGive = amountToGive - 6
		AddCoins(color, amountToGive, true)
		return
	elseif amount <= 15 and amount > 6 then
		CoinBags.Coin3.takeObject({
			position = coinSpawnPosition,
			rotation = PlayerInfo[color].ComponentRotation,
			smooth = false
		})

		amountToGive = amountToGive - 3
		AddCoins(color, amountToGive, true)
		return
	elseif amount <= 6 then
		CoinBags.Coin1.takeObject({
			position = coinSpawnPosition,
			rotation = PlayerInfo[color].ComponentRotation,
			smooth = false
		})

		amountToGive = amountToGive - 3
		AddCoins(color, amountToGive, true)
		return
	end
end

function SpendResources(color, cost)
    -- Resource deduction logic
end

function AddToTableau(color, card)
    -- Card placement logic
end

function CanBuildWonderStage(color)
    -- Wonder stage validation
end

function FindNextColor(Color, Direction)
  local tempAllPlayers = Player.getPlayers()
  for i, PlayerInstance in ipairs(tempAllPlayers) do
    if PlayerInstance.color == Color then
      if Direction == "Left" then
        -- Move left around the table (next in array)
        if i == #tempAllPlayers then
          return tempAllPlayers[1].color
        end
        return tempAllPlayers[i+1].color
    else -- "Right"
        -- Move right around the table (previous in array)
        if i == 1 then
          return tempAllPlayers[#tempAllPlayers].color
        end
        return tempAllPlayers[i-1].color
      end
    end
  end
end

function onChat(message, player)
	if message == "debug" then
		printToAll("Debug mode activated!", {1,1,0})

		for i, textObj in ipairs(TextOnSetupBoard) do
			if textObj and textObj.destroy then
				textObj.destroy()
			end
		end

		TextOnSetupBoard = {}
		SetupBoard.destruct()
		return false
	end

	if message:lower() == "card" then

		for _, PlayerInstance in ipairs(Player.getPlayers()) do
			local handObjects = PlayerInstance.getHandObjects()
			for _, Card in ipairs(handObjects) do
				 RotateHands(Card, PlayerInstance.color, "Right")
			end
		end

		return false
		end
end

function disableAllTiles()
	for color, data in pairs(PlayerCardHolder) do
		if data.Tile then
			data.Tile.setLock(true)
			data.Tile.interactable = false
		end
	end
end

function ForceLoadAllAssets()
  -- Add any bags that should have their contents pre-loaded
  local AllBagsToLoad = {
    WonderBags.Collection,
    WonderBags.Base,
    WonderBags.Leader,
    WonderBags.Cities,
    WonderBags.Armada,
    DockyardBag,
    FrontiersBag
  }

  for _, BagToLoad in ipairs(AllBagsToLoad) do
    if BagToLoad and BagToLoad.getObjects then
      for _, Board in ipairs(BagToLoad.getObjects()) do
        BagToLoad.takeObject({
          position = {68.00, -10, 19.00},
          smooth = false,
          callback_function = function(spawnedObject)
            spawnedObject.setLock(true)

            -- Define recursive wait function
            local function checkAndReturn()
                if not spawnedObject.loading_custom then
                    spawnedObject.setLock(false)
                    BagToLoad.putObject(spawnedObject)
                else
                    -- Still loading, check again in 2 seconds
                    Wait.time(checkAndReturn, 2)
                end
            end

            -- Start the first check after 2 seconds
            Wait.time(checkAndReturn, 2)
          end
        })
      end
    else
        print("Warning: Bag not found or invalid - " .. tostring(BagToLoad))
    end
  end

  return 1
end

function LockSpawnedObject(object)
	object.setLock(true)
end

function printDeckZones()
	print("----- Printing All Deck Zones -----")

	-- Helper function to handle nested printing
	local function printTable(tbl, indent)
		indent = indent or 0
		local spacing = string.rep("  ", indent)

		for key, value in pairs(tbl) do
			if type(value) == "table" then
				print(spacing .. key .. ":")
				printTable(value, indent + 1)
			else
				if value ~= nil and value.getGUID then
					print(spacing .. key .. " = " .. value.getGUID())
				else
					print(spacing .. key .. " = " .. tostring(value))
				end
			end
		end
	end

	printTable(DeckZones)
	print("----- Finished Printing -----")
end
