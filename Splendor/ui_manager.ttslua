-- Splendor UI Manager
-- Handles all UI and XML-related functions

-- UI state variables
scoreTableVisible = true
helperVisible = true
rulesVisible = false
soundEnabled = true
tintEnabled = true

-- Get XML table for score display
function getXmlTable()
    local xmlTable = {
        {
            tag = 'Panel',
            attributes = {
                position = '0 0 -50',
                rotation = '0 0 0',
                width = '500',
                height = '200',
                color = 'rgba(0,0,0,0.8)'
            },
            children = {
                {
                    tag = 'Text',
                    attributes = {
                        text = 'SPLENDOR SCOREBOARD',
                        fontSize = '24',
                        color = 'white',
                        alignment = 'MiddleCenter',
                        rectAlignment = 'MiddleCenter',
                        offsetXY = '0 80'
                    }
                }
            }
        }
    }
    
    -- Add player scores
    local players = {}
    if getPlayers then
        players = getPlayers()
    end
    
    local yOffset = 40
    for i, player in pairs(players) do
        local points = 0
        local cards = 0
        
        if getPlayerPoints then
            points = getPlayerPoints(player)
        end
        if getPlayerCardCount then
            cards = getPlayerCardCount(player)
        end
        
        local playerText = string.format('%s: %d points (%d cards)', player, points, cards)
        
        table.insert(xmlTable[1].children, {
            tag = 'Text',
            attributes = {
                text = playerText,
                fontSize = '18',
                color = 'white',
                alignment = 'MiddleCenter',
                rectAlignment = 'MiddleCenter',
                offsetXY = '0 ' .. yOffset
            }
        })
        
        yOffset = yOffset - 25
    end
    
    -- Add current turn indicator
    local currentPlayer = ''
    if getCurrentPlayer then
        currentPlayer = getCurrentPlayer() or ''
    end
    
    table.insert(xmlTable[1].children, {
        tag = 'Text',
        attributes = {
            text = 'Current Turn: ' .. currentPlayer,
            fontSize = '16',
            color = 'yellow',
            alignment = 'MiddleCenter',
            rectAlignment = 'MiddleCenter',
            offsetXY = '0 ' .. (yOffset - 20)
        }
    })
    
    return xmlTable
end

-- Update score table
function updateTable()
    if scoreTableVisible then
        scoreTable()
    end
end

-- Show/hide score table
function scoreTable()
    if scoreTableVisible then
        local xmlTable = getXmlTable()
        Global.UI.setXmlTable(xmlTable)
    else
        Global.UI.setXmlTable({})
    end
end

-- Toggle score table visibility
function scoreTableVisibility()
    scoreTableVisible = not scoreTableVisible
    scoreTable()
    
    local message = scoreTableVisible and 'Score table shown' or 'Score table hidden'
    broadcastToAll(message, {1, 1, 1})
end

-- Update helper display
function updateHelper()
    if not helperVisible then
        return
    end
    
    local helperText = 'GAME HELPER\n\n'
    
    -- Add current player info
    local currentPlayer = ''
    if getCurrentPlayer then
        currentPlayer = getCurrentPlayer() or ''
    end
    helperText = helperText .. 'Current Turn: ' .. currentPlayer .. '\n\n'
    
    -- Add game rules reminder
    helperText = helperText .. 'ACTIONS:\n'
    helperText = helperText .. '• Take 3 different colored gems\n'
    helperText = helperText .. '• Take 2 gems of the same color (if 4+ available)\n'
    helperText = helperText .. '• Buy a development card\n'
    helperText = helperText .. '• Reserve a development card\n\n'
    
    helperText = helperText .. 'WIN CONDITION:\n'
    helperText = helperText .. '• First to 15 points wins\n'
    helperText = helperText .. '• Tiebreaker: fewest cards\n\n'
    
    helperText = helperText .. 'TOKEN LIMIT: 10 per player'
    
    -- Update helper UI (this would need to be implemented based on specific UI setup)
    -- For now, we'll use a simple broadcast
    -- broadcastToAll(helperText, {0.8, 0.8, 0.8})
end

-- Show rules
function showRules()
    rulesVisible = true
    
    local rulesText = 'SPLENDOR RULES\n\n'
    rulesText = rulesText .. 'SETUP:\n'
    rulesText = rulesText .. '• Each player starts with no gems or cards\n'
    rulesText = rulesText .. '• 4 development cards of each level are dealt\n'
    rulesText = rulesText .. '• Noble tiles equal to players + 1 are dealt\n\n'
    
    rulesText = rulesText .. 'TURN ACTIONS (choose one):\n'
    rulesText = rulesText .. '1. Take 3 gems of different colors\n'
    rulesText = rulesText .. '2. Take 2 gems of the same color (if 4+ in supply)\n'
    rulesText = rulesText .. '3. Buy a development card\n'
    rulesText = rulesText .. '4. Reserve a development card (gain 1 gold)\n\n'
    
    rulesText = rulesText .. 'DEVELOPMENT CARDS:\n'
    rulesText = rulesText .. '• Provide permanent gem discounts\n'
    rulesText = rulesText .. '• Award prestige points\n'
    rulesText = rulesText .. '• Higher levels cost more but give more points\n\n'
    
    rulesText = rulesText .. 'NOBLES:\n'
    rulesText = rulesText .. '• Automatically awarded when requirements met\n'
    rulesText = rulesText .. '• Worth 3 prestige points each\n\n'
    
    rulesText = rulesText .. 'WINNING:\n'
    rulesText = rulesText .. '• First player to 15 points triggers end game\n'
    rulesText = rulesText .. '• All players finish the round\n'
    rulesText = rulesText .. '• Highest points wins (tiebreaker: fewest cards)\n\n'
    
    rulesText = rulesText .. 'LIMITS:\n'
    rulesText = rulesText .. '• Maximum 10 gems per player\n'
    rulesText = rulesText .. '• Maximum 3 reserved cards per player'
    
    broadcastToAll(rulesText, {0.9, 0.9, 0.9})
end

-- Hide rules
function hideRules()
    rulesVisible = false
    broadcastToAll('Rules hidden', {1, 1, 1})
end

-- Toggle sound
function soundSwitch()
    soundEnabled = not soundEnabled
    
    local message = soundEnabled and 'Sound enabled' or 'Sound disabled'
    broadcastToAll(message, {1, 1, 1})
    
    -- This would need to be implemented based on TTS sound system
    -- For now, just store the state
end

-- Toggle tint helper
function tintHelperSwitch()
    tintEnabled = not tintEnabled
    
    local message = tintEnabled and 'Gem tinting enabled' or 'Gem tinting disabled'
    broadcastToAll(message, {1, 1, 1})
    
    -- Update gem tinting if functions are available
    if tintEnabled then
        if changeAllTokensTint then
            changeAllTokensTint()
        end
    else
        -- Reset all gem tints to normal
        if resetAllTokensTint then
            resetAllTokensTint()
        end
    end
end

-- Card play helper
function cardPlayHelper(card, player)
    if not card or not player then
        return
    end
    
    local cardData = {}
    if parseCard then
        cardData = parseCard(card)
    end
    
    local helperText = string.format('Card Info for %s:\n', player)
    helperText = helperText .. string.format('Points: %d\n', cardData.points or 0)
    helperText = helperText .. string.format('Discount: %s\n', cardData.discount or 'none')
    
    if cardData.cost then
        helperText = helperText .. 'Cost: '
        local costParts = {}
        for color, amount in pairs(cardData.cost) do
            if amount > 0 then
                table.insert(costParts, string.format('%d %s', amount, color))
            end
        end
        helperText = helperText .. table.concat(costParts, ', ') .. '\n'
    end
    
    -- Check if player can afford it
    local canAfford = false
    if checkPayment then
        canAfford = checkPayment(player, cardData.cost or {})
    end
    
    helperText = helperText .. string.format('Can afford: %s', canAfford and 'Yes' or 'No')
    
    broadcastToColor(helperText, player, {0.8, 0.8, 1})
end

-- Tint card button
function tintCardButton(card, color)
    if not tintEnabled then
        return
    end
    
    if card and card.setColorTint then
        card.setColorTint(color or {0.8, 1, 0.8})
    end
end

-- Remove tint from card button
function removeTintCardButton(card)
    if card and card.setColorTint then
        card.setColorTint({1, 1, 1})
    end
end

-- Helper click handler
function helperOnClick(player, value, id)
    if id == 'score_toggle' then
        scoreTableVisibility()
    elseif id == 'rules_show' then
        showRules()
    elseif id == 'rules_hide' then
        hideRules()
    elseif id == 'sound_toggle' then
        soundSwitch()
    elseif id == 'tint_toggle' then
        tintHelperSwitch()
    end
end

-- Get UI state
function getUIState()
    return {
        scoreTableVisible = scoreTableVisible,
        helperVisible = helperVisible,
        rulesVisible = rulesVisible,
        soundEnabled = soundEnabled,
        tintEnabled = tintEnabled
    }
end

-- Set UI state
function setUIState(state)
    if state.scoreTableVisible ~= nil then
        scoreTableVisible = state.scoreTableVisible
    end
    if state.helperVisible ~= nil then
        helperVisible = state.helperVisible
    end
    if state.rulesVisible ~= nil then
        rulesVisible = state.rulesVisible
    end
    if state.soundEnabled ~= nil then
        soundEnabled = state.soundEnabled
    end
    if state.tintEnabled ~= nil then
        tintEnabled = state.tintEnabled
    end
end

-- Initialize UI
function initializeUI()
    updateTable()
    updateHelper()
end

-- Check if sound is enabled
function isSoundEnabled()
    return soundEnabled
end

-- Check if tint is enabled
function isTintEnabled()
    return tintEnabled
end