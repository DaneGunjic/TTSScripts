function setupObjectReferences()
    gemZones = {
        white = getObjectFromGUID('1a8069'),
        blue = getObjectFromGUID('409a8a'),
        green = getObjectFromGUID('2bd361'),
        red = getObjectFromGUID('629bcb'),
        black = getObjectFromGUID('43ec82')
    }
    goldGemZone = getObjectFromGUID('f47d76')
    decks = {
        getObjectFromGUID("251eb0"),
        getObjectFromGUID("8dff7a"),
        getObjectFromGUID("012bb9")
    }

    deckZones = {
        getObjectFromGUID("56be1c"),
        getObjectFromGUID("008a77"),
        getObjectFromGUID("ab728f")
    }

    peopleBag = getObjectFromGUID("ee4886")
    tabletop = getObjectFromGUID("95f736")
    playmat = getObjectFromGUID("41b86b")
    cardZone = getObjectFromGUID("4a8c4b")
    dingSound = getObjectFromGUID("e8f82a")

    playerZones = {
        red = preparePlayerZones('eec711', '83393c', '3589f4', '51a5a6', '7c0a5b', '686092', 'fb58db', '96b1f2', '2ea149', '2572b7', '206bfd', 'c94c86'),
        green = preparePlayerZones('b71c55', 'ae8fda', 'bafe9c', '3bf6a5', 'd4d4c7', 'edff68', '4eb556', '9a57a0', '4f4ad1', '49dee6', 'e25046', '60bd21'),
        blue = preparePlayerZones('5572ef', 'fc149d', 'fd90fb', '006abb', 'edac2b', '9f4184', '846109', '3dfc3f', '0148da', 'ff8fe2', '5a5244', '77dfff'),
        pink = preparePlayerZones('d9fd6d', 'b5ca51', '8b8e4f', 'fe0a3c', '7f81ba', 'a1546a', 'c38d2d', '54e0ec', 'ff3141', 'da32f2', '18ff34', 'a14c79')
    }

	handZones = {
		Red = getObjectFromGUID('caf838'),
		Blue = getObjectFromGUID('82508f'),
		Pink = getObjectFromGUID('5437f5'),
		Green = getObjectFromGUID('902d54'),
	}

    for colour, zone in pairs(gemZones) do
        zone.setVar(COLOUR_NAME, colour)
        zone.setVar(ZONE_VARS.COUNT, 7)
        zone.setVar(ZONE_VARS.OWNER, ZONE_VARS.BANK)
    end

    goldGemZone.setVar(COLOUR_NAME, GOLD_NAME)
    goldGemZone.setVar(ZONE_VARS.COUNT, 5)
    goldGemZone.setVar(ZONE_VARS.OWNER, ZONE_VARS.BANK)
    for playerColour, playerZone in pairs(playerZones) do
        for colour, zone in pairs(playerZone.gems) do
            zone.setVar(COLOUR_NAME, colour)
            zone.setVar(ZONE_VARS.COUNT, 0)
            zone.setVar(ZONE_VARS.OWNER, ZONE_VARS.PLAYER)
        end
    end

    cardToDeckRefferences = {}
    availablePeople = {}
    lastRound = false
    returnMode = false
end

function preparePlayerZones(gWhite, gBlue, gGreen, gRed, gBlack, gGold, cWhite, cBlue, cGreen, cRed, cBlack, people)
    return {
        gems = {
            white = getObjectFromGUID(gWhite),
            blue = getObjectFromGUID(gBlue),
            green = getObjectFromGUID(gGreen),
            red = getObjectFromGUID(gRed),
            black = getObjectFromGUID(gBlack),
            gold = getObjectFromGUID(gGold)
        },
        cards = {
            white = getObjectFromGUID(cWhite),
            blue = getObjectFromGUID(cBlue),
            green = getObjectFromGUID(cGreen),
            red = getObjectFromGUID(cRed),
            black = getObjectFromGUID(cBlack),
        },
        people = getObjectFromGUID(people)
    }
end

function prepareTable()
    players = getPlayers()
    playerCount = #players

    if dev then
        playerCount = 4
    end

	if (playerCount < 2) then
	   warnAll("Game requires two to four players to be seated")
	   return
	elseif (2 <= playerCount and playerCount <= 4) then
		initGlobalVariables()
        UI.setAttribute("StartButton", "visibility", "nil")
        UI.setAttribute("StartButtonNonHost", "visibility", "nil")
        setPlayersOrder()
        destroyRedundantObjects()
        createGemButtons(true)
        shuffleAndDealCardsFromDecks()
        shuffleAndDealPeopleFromBag()
        setPlayerTurn(playersOrder[1])

        Wait.frames(function() scoreTable() end, 50)
        Wait.frames(function() scoreTableVisibility(players) end, 50)
    else
      warnAll("Game requires two to four players to be seated")
    end
end

function initGlobalVariables()
    for colour, zone in pairs(gemZones) do
        zone.setVar(COLOUR_NAME, colour)
        zone.setVar(ZONE_VARS.COUNT, TOKEN_COUNTS_PER_PLAYERS[playerCount])
        zone.setVar(ZONE_VARS.OWNER, ZONE_VARS.BANK)
    end
    goldGemZone.setVar(COLOUR_NAME, GOLD_NAME)
    goldGemZone.setVar(ZONE_VARS.COUNT, GOLD_TOKEN_COUNT)
    goldGemZone.setVar(ZONE_VARS.OWNER, ZONE_VARS.BANK)
    for playerColour, playerZone in pairs(playerZones) do
        for colour, zone in pairs(playerZone.gems) do
            zone.setVar(COLOUR_NAME, colour)
            zone.setVar(ZONE_VARS.COUNT, 0)
            zone.setVar(ZONE_VARS.OWNER, ZONE_VARS.PLAYER)
        end
    end
    cardToDeckRefferences = {}
    availablePeople = {}
    lastRound = false
    returnMode = false
end

function setPlayersOrder()
    playersOrder = {}
    local randomIndex = math.random(#players)
    for k, player in pairs(players) do
        local index = ((randomIndex + k) % #players) + 1
        playersOrder[index] = player.colour
    end
end

function destroyRedundantObjects()
    local gemsToDestroyCount = 7 - TOKEN_COUNTS_PER_PLAYERS[playerCount]
    for k, zone in pairs(gemZones) do
        local gemsToDestroy = getTopTokensFromZone(zone, gemsToDestroyCount)
        for a, gem in ipairs(gemsToDestroy) do
            gem.destruct()
        end
    end
    peopleBag.destruct()
end

function shuffleAndDealCardsFromDecks()
    for deckIndex, deck in pairs(decks) do
        deck.shuffle()
        deckZones[deckIndex].createButton(DECK_BUTTON_PARAMS)
        for i = 1, CARDS_COUNT do
            dealCard(deck, cardPosition(CARD_X_POSITIONS[i], DECK_Z_POSITIONS[deckIndex]))
        end
    end
end

function shuffleAndDealPeopleFromBag()
    peopleBag.shuffle()
    for i = 1, PEOPLE_TILES_PER_PLAYERS[playerCount] do
        local person = peopleBag.takeObject(personParams(PEOPLE_X_POSITIONS[i]))
        person.interactable = false
        table.insert(availablePeople, {object = person, parsed = parsePerson(person)})
    end
end

function checkHost()
  nonAdmins = {}
  for k, playerColor in pairs(getSeatedPlayers()) do
      if not Player[playerColor].admin then
        table.insert(nonAdmins, playerColor);
      end
  end
  --warnAll(zonk.. table.concat(nonAdmins ,"|") .. zonk )
  if #nonAdmins > 0 then
  Wait.frames(function () UI.setAttribute("StartButtonNonHost", "visibility", table.concat(nonAdmins ,"|")) end, 100)
  end
end

function onPlayerChangeColor(player_color)
  checkHost()
end

function scoreTableVisibility (players)
  for i, player in pairs(players) do
      UI.setAttribute("helper"..player.colour, "visibility", player.colour)
      UI.setAttribute("button"..player.colour, "visibility", player.colour)
  end
end
