function getPlayer(playerColour)
    for k, player in pairs(players) do
        if player.colour == playerColour then
            return player
        end
    end
    warnAll(ERROR_MESSAGE)
end

function countCurrentPlayerTokens(player)
    local tokenCount = 0
    local player = getPlayer(player)
    tokenCount = player['wGemCount'] + player['uGemCount'] + player['gGemCount'] + player['rGemCount'] + player['bGemCount'] + player['jGemCount']
    return tokenCount
end

function nextTurn(arg)
    resetSelectedGems()
    changeAllTokensTint()
    removeTintCardButton()
    if #getSeatedPlayers() == 0 then
        return
    end
    if not validTokenHandSize(currentPlayer) then
        return
    end
    local currentPlayerIndex = getIndex(playersOrder, currentPlayer)
    local nextPlayerIndex = 1 + (currentPlayerIndex % #playersOrder)
    local nextPlayer = playersOrder[nextPlayerIndex]
    if not checkPeopleStatus(currentPlayer) then
      return
    end
    noblePickMode = false
    if checkWinConditions(nextPlayerIndex, currentPlayerIndex) then
        currentPlayer = 'none'
        return
    end
    if (not contains(getSeatedPlayers(), nextPlayer)) then
        warnAll(nextPlayer .. '  is no longer seated. Skipping their turn...')
        currentPlayer = nextPlayer
        nextTurn()
        return
    else
        setPlayerTurn(playersOrder[nextPlayerIndex])
    end
end

function updateHelper(playerColour)
  local table = {r = 'r', w = 'w', g = 'g', b = 'b', u = 'u', j = 'j'}
  local player = getPlayer(playerColour)
    for i, type in pairs(table) do
      local card = type.. 'CardCount'
      local gem = type.. 'GemCount'
      local gemId = gem .. playerColour
      local cardId = card .. playerColour
      UI.setAttribute(gemId, "text", player[gem])
      if i ~= 'j' then
        UI.setAttribute(cardId, "text", player[gem]+player[card])
      end
    end
end
