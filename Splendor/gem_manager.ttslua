function gemButtonParams(tokenCount, mode)
    local yPos = (tokenCount * 0.1) - 0.2
    local position = {0, yPos, 0}
    if mode == 'label' then
        return {
            label = tokenCount,
            click_function = "dummy",
            position = position,
            rotation = {0, 180, 0},
            height = 0,
            width = 0,
            font_color = {1, 1, 1, 0.6},
            font_size = 300
        }
    elseif mode == 'get' then
        return {
            click_function = "gemButtonClicked",
            tooltip = 'Select/Take 2',
            function_owner = self,
            position = position,
            height = 400,
            width = 400,
            color = {0, 0, 0, 0},
            hover_color = {0, 1, 0, 0.3}
        }
    elseif mode == 'return' then
        return {
            click_function = "returnGemClicked",
            tooltip = 'Return',
            function_owner = self,
            position = position,
            height = 400,
            width = 400,
            color = {0, 0, 0, 0},
            hover_color = {1, 0, 0, 0.3}
        }
    else
        warnAll(ERROR_MESSAGE)
    end
end

function createGemButtons(init)
    resetSelectedGems()
    for k, zone in pairs(gemZones) do
        if init then
            createGemButtonsForZone(zone, TOKEN_COUNTS_PER_PLAYERS[playerCount])
        else
            createGemButtonsForZone(zone)
        end
    end
    if init then
        createGemButtonsForZone(goldGemZone, GOLD_TOKEN_COUNT)
    else
        createGemButtonsForZone(goldGemZone)
        for playerColour, playerZone in pairs(playerZones) do
            for colour, zone in pairs(playerZone.gems) do
                createGemButtonsForZone(zone)
            end
        end
    end
end

function createGemButtonsForZone(zone, count)
    if zone.getButtons() != nil then
        local buttonCount = #zone.getButtons()
        while buttonCount > 0 do
            zone.removeButton(buttonCount - 1)
            buttonCount = buttonCount - 1
        end
    end

    if count == nil then
        count = zone.getVar(ZONE_VARS.COUNT)
    end

    if count > 0 then
        zone.createButton(gemButtonParams(count, 'label'))
      if not returnMode and zone.getVar(ZONE_VARS.OWNER) == ZONE_VARS.BANK and zone.getVar(COLOUR_NAME) != GOLD_NAME then
      zone.createButton(gemButtonParams(count, 'get'))
      elseif returnMode and zone.getVar(ZONE_VARS.OWNER) == ZONE_VARS.PLAYER then
      zone.createButton(gemButtonParams(count, 'return'))
		  end
	  end
end

function resetSelectedGems()
    selectedGems = {
        red = false,
        white = false,
        green = false,
        black = false,
        blue = false
    }
end

function countSelectedGems()
    return #getSelectedGemColours()
end

function getSelectedGemColours()
    local colours = {}
    local i = 1
    for colour, isSelected in pairs(selectedGems) do
        if isSelected then
            colours[i] = colour
            i = i + 1
        end
    end
    return colours
end

function canTakeSelectedGems(selectedColours)
    if countSelectedGems() == 3 then
        return true
    end
    for colour, value in pairs(selectedGems) do
        if (not value) then
            if not isZoneEmpty(bankGemZone(colour)) then
                return false
            end
        end
    end
    return true
end

function gemButtonClicked(zone, player, alt_click)
    if (not isValidPlay(player)) then
        return
    end

    local colour = zone.getVar(COLOUR_NAME)
    if alt_click then
        if getZoneGemCount(bankGemZone(colour)) >= 4 then
            moveTokens(bankGemZone(colour), playerGemZone(player, colour), 2)
            changeGemCount(player, colour, 2)
            nextTurn()
        else
            Player[player].broadcast('There need to be at least 4 tokens left in the stack to take 2 of the same colour', CHAT_INFO_COLOR)
            if soundToggle == 'talk' then
                dingSound.AssetBundle.playTriggerEffect(5)
            end
            return
        end
    else
        selectedGems[colour] = not selectedGems[colour]
        changeTokensTint(zone)
        if canTakeSelectedGems() then
            local selectedColours = getSelectedGemColours()
            takeMultiColoredGems(selectedColours, player)
        end
    end
end

function returnGemClicked(zone, player)
    if (not isValidPlay(player, true)) then
        return
    end
    local colour = zone.getVar(COLOUR_NAME)
    moveTokens(playerGemZone(player, colour), bankGemZone(colour), 1)
    changeGemCount(player, colour, -1)
    if countCurrentPlayerTokens(player) <= MAX_TOKEN_COUNT then
        returnMode = false
        createGemButtons()
        nextTurn()
    end
end

function takeMultiColoredGems(selectedColours, player)
    for k, colour in pairs(selectedColours) do
        moveToken(bankGemZone(colour), playerGemZone(player, colour))
        changeGemCount(player, colour, 1)
    end
    nextTurn()
end

function getZoneGemCount(zone)
    if isZoneEmpty(zone) then
        return 0
    else
        return #zone.getObjects()
    end
    warnAll(ERROR_MESSAGE)
end

function isZoneEmpty(zone)
    return zone.getObjects() == nil or #zone.getObjects() == 0
end

function changeAllTokensTint()
    for k, zone in pairs(gemZones) do
        changeTokensTint(zone)
    end
end

function changeTokensTint(zone)
    local tint = {1, 1, 1}
    if (selectedGems[zone.getVar(COLOUR_NAME)]) then
        tint = {0.66, 1, 0.66}
    end

    for k, v in pairs(zone.getObjects()) do
        v.setColorTint(tint)
    end
end

function moveTokens(sourceZone, destinationZone, count)
    if count == nil then
        count = 1
    end

    local yPos = destinationZone.getPosition().y - 0.55
    local topDestinationToken = getTopTokenFromZone(destinationZone)

    if topDestinationToken != nil then
        yPos = topDestinationToken.getPosition().y
    end

    local topTokens = getTopTokensFromZone(sourceZone, count)
    for i = 1, count do
        yPos = yPos + 0.1
        topTokens[i].setPosition({destinationZone.getPosition().x, yPos, destinationZone.getPosition().z})
    end

    sourceZone.setVar(ZONE_VARS.COUNT, sourceZone.getVar(ZONE_VARS.COUNT) - count)
    destinationZone.setVar(ZONE_VARS.COUNT, destinationZone.getVar(ZONE_VARS.COUNT) + count)
    createGemButtonsForZone(sourceZone)
    createGemButtonsForZone(destinationZone)
end

function moveToken(sourceZone, destinationZone)
    moveTokens(sourceZone, destinationZone)
end

function playerGemZone(player, colour)
    return playerZones[player:lower()].gems[colour]
end

function playerGemZones(player)
    return getPlayerZones(player).gems
end

function bankGemZone(colour)
    if colour == GOLD_NAME then
        return goldGemZone
    end
    return gemZones[colour]
end

function changeGemCount(playerColour, gemColour, gemCount)
    local gemColor = 0
    local player = getPlayer(playerColour)
    if gemCount == 0 then
    return
    end
    if gemColour == 'gold' then
    gemColor = 'jGemCount'
    else
    gemColor = getKeyForValue(COST_COLOUR_NAMES, gemColour) .. 'GemCount'
    end
    player[gemColor] = player[gemColor] + gemCount
    updateHelper(playerColour)
end
